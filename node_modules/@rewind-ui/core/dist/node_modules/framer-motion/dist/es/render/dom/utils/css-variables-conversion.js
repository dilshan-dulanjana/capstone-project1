import{invariant as t}from"../../../utils/errors.js";import{isNumericalString as n}from"../../../utils/is-numerical-string.js";import{isCSSVariableToken as r}from"./is-css-variable.js";const e=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;function o(t){const n=e.exec(t);if(!n)return[,];const[,r,o]=n;return[r,o]}const i=4;function s(e,c,a=1){t(a<=i,`Max CSS variable fallback depth detected in property "${e}". This may indicate a circular fallback dependency.`);const[u,f]=o(e);if(!u)return;const l=window.getComputedStyle(c).getPropertyValue(u);if(l){const t=l.trim();return n(t)?parseFloat(t):t}return r(f)?s(f,c,a+1):f}function c(t,{...n},e){const o=t.current;if(!(o instanceof Element))return{target:n,transitionEnd:e};e&&(e={...e}),t.values.forEach((t=>{const n=t.get();if(!r(n))return;const e=s(n,o);e&&t.set(e)}));for(const t in n){const i=n[t];if(!r(i))continue;const c=s(i,o);c&&(n[t]=c,e||(e={}),void 0===e[t]&&(e[t]=i))}return{target:n,transitionEnd:e}}export{o as parseCSSVariable,c as resolveCSSVariables};
