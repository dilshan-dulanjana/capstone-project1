import{warning as t}from"../../../utils/errors.js";import{clamp as o}from"../../../utils/clamp.js";import{secondsToMilliseconds as r,millisecondsToSeconds as n}from"../../../utils/time-conversion.js";const s=.001,e=.01,i=10,a=.05,u=1;function p({duration:e=800,bounce:i=.25,velocity:a=0,mass:u=1}){let p,m;t(e<=r(10),"Spring duration must be 10 seconds or less");let h=1-i;h=o(.05,1,h),e=o(.01,10,n(e)),h<1?(p=t=>{const o=t*h,r=o*e,n=o-a,i=f(t,h),u=Math.exp(-r);return s-n/i*u},m=t=>{const o=t*h*e,r=o*a+a,n=Math.pow(h,2)*Math.pow(t,2)*e,i=Math.exp(-o),u=f(Math.pow(t,2),h);return(-p(t)+s>0?-1:1)*((r-n)*i)/u}):(p=t=>Math.exp(-t*e)*((t-a)*e+1)-.001,m=t=>Math.exp(-t*e)*(e*e*(a-t)));const l=function(t,o,r){let n=r;for(let r=1;r<c;r++)n-=t(n)/o(n);return n}(p,m,5/e);if(e=r(e),isNaN(l))return{stiffness:100,damping:10,duration:e};{const t=Math.pow(l,2)*u;return{stiffness:t,damping:2*h*Math.sqrt(u*t),duration:e}}}const c=12;function f(t,o){return t*Math.sqrt(1-o*o)}export{f as calcAngularFreq,p as findSpring,u as maxDamping,i as maxDuration,a as minDamping,e as minDuration};
