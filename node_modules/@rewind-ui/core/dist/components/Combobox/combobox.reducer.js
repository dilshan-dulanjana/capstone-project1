import{ComboboxActionEnum as e}from"./Combobox.types.js";const a=(a,s)=>{switch(s.type){case e.register:return Object.assign(Object.assign({},a),{options:[...a.options,{label:s.payload.label,value:s.payload.value}]});case e.single_select:if(!s.payload.omitOnChange&&a.onChange&&a.onChange(s.payload.value),void 0===s.payload.value)return a;const t=a.selectedOptions.find((e=>e.value===s.payload.value)),n=a.options.find((e=>e.value===s.payload.value));return Object.assign(Object.assign({},a),{search:"",searching:!1,selectedOptions:t&&s.payload.toggle?[]:[n]});case e.multi_select:const l=a.selectedOptions.find((e=>e.value===s.payload.value));let o=a.selectedOptions.filter((e=>e.value!==(null==l?void 0:l.value)));if(l&&s.payload.toggle)return!s.payload.omitOnChange&&a.onChange&&a.onChange(o.map((e=>e.value))),Object.assign(Object.assign({},a),{search:"",searching:!1,selectedOptions:o});if(l&&!s.payload.toggle)return a;const i=a.options.find((e=>e.value===s.payload.value));return o=[...a.selectedOptions,i],!s.payload.omitOnChange&&a.onChange&&a.onChange(o.map((e=>e.value))),Object.assign(Object.assign({},a),{search:"",searching:!1,selectedOptions:o});case e.init_multi_select:const c=a.selectedOptions.map((e=>e.value)).sort(),r=s.payload.values.sort(),g=c.length===r.length;if(r.every(((e,a)=>c[a]===e))&&g)return a;const p=a.options.filter((e=>s.payload.values.includes(e.value)));return Object.assign(Object.assign({},a),{selectedOptions:p});case e.remove_last:if(a.onChange){const e=a.selectedOptions.slice(0,-1).map((e=>e.value));a.onChange(a.multiple?e:e[0])}return Object.assign(Object.assign({},a),{search:"",searching:!1,selectedOptions:a.selectedOptions.slice(0,-1)});case e.reset:return a.onChange&&a.onChange(null),Object.assign(Object.assign({},a),{search:"",searching:!1,selectedOptions:[]});case e.search_start:return Object.assign(Object.assign({},a),{search:s.payload.search,searching:!0});case e.search_reset:return Object.assign(Object.assign({},a),{search:"",searching:!1});default:return a}};export{a as comboboxReducer};
